diff --git a/chromiumcontent/BUILD.gn b/chromiumcontent/BUILD.gn
index cfd5c26..9a5ebe2 100644
--- a/chromiumcontent/BUILD.gn
+++ b/chromiumcontent/BUILD.gn
@@ -33,7 +33,7 @@ group("targets") {
       "//ui/views/controls/webview",
     ]
 
-    if (is_linux) {
+    if (is_linux||is_bsd) {
       deps += [ "//chrome/browser/ui/libgtkui:libgtk2ui" ]
     }
 
@@ -53,7 +53,7 @@ group("targets") {
         ":webrtc_common",
       ]
 
-      if (is_linux) {
+      if (is_linux||is_bsd) {
         deps += [ ":libgtkui" ]
       }
 
@@ -150,7 +150,7 @@ if (is_electron_build && is_component_build) {
       deps = [ "//third_party/webrtc:webrtc_common" ]
   }
 
-  if (is_linux) {
+  if (is_linux||is_bsd) {
     # The original libgtkui target is a shared library, so we must list
     # the object files instead of just depending on it.
     static_library("libgtkui") {
@@ -374,7 +374,7 @@ config("build_time_executable") {
   # libraries in the executable's directory, so ICU cannot be found. So let's
   # make sure rpath is set here.
   # See '//build/config/gcc/BUILD.gn' for details on the rpath setting.
-  if (is_electron_build && is_linux && !is_component_build) {
+  if (is_electron_build && (is_linux||is_bsd) && !is_component_build) {
     configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
   }
 }
diff --git a/script/build b/script/build
index 2d568dd..3bc7ba7 100755
--- a/script/build
+++ b/script/build
@@ -23,15 +23,16 @@ if sys.platform == 'win32':
   NINJA = '{0}.exe'.format(NINJA)
 elif IS_MIPS64EL_HOST:
   NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja-build')
-
+elif sys.platform == 'freebsd11':
+  NINJA = 'ninja'
 
 def main():
   args = parse_args()
   target_arch = args.target_arch
 
   env = os.environ.copy()
-  env['PATH'] = os.pathsep.join([os.path.join(VENDOR_DIR, 'depot_tools'),
-                                 env['PATH']])
+  #env['PATH'] = os.pathsep.join([os.path.join(VENDOR_DIR, 'depot_tools'),
+  #                               env['PATH']])
   if sys.platform in ['win32', 'cygwin']:
     env['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'
   elif target_arch == 'arm64':
diff --git a/script/create-dist b/script/create-dist
index 58161ec..0f12ab2 100755
--- a/script/create-dist
+++ b/script/create-dist
@@ -39,7 +39,9 @@
   NINJA = '{0}.exe'.format(NINJA)
 elif IS_MIPS64EL_HOST:
   NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja-build')
-
+elif sys.platform == 'freebsd11':
+  NINJA = 'ninja'
+  
 COPY_PY = os.path.join(TOOLS_DIR, 'copy.py')
 LICENSES_PY = os.path.join(TOOLS_DIR, 'licenses.py')
 
@@ -47,6 +49,7 @@
   'cygwin': 'win32',
   'darwin': 'darwin',
   'linux2': 'linux',
+  'freebsd11': 'linux',
   'win32': 'win32',
 }[sys.platform]
 
@@ -742,6 +745,8 @@
     print 'Zipping static_library builds...'
     p = os.path.join(SOURCE_ROOT, 'libchromiumcontent-static.zip')
     make_zip(MAIN_DIR, ['static_library'], [], p)
+    p = os.path.join(SOURCE_ROOT, 'libchromiumcontent.zip')
+    make_zip(MAIN_DIR, ['src', 'ffmpeg'], ['LICENSES.chromium.html'], p)
 
 
 def make_zip(src, dirs, files, target):
diff --git a/script/update b/script/update
index b05b4b0..10c066b 100755
--- a/script/update
+++ b/script/update
@@ -25,6 +25,8 @@
 NINJA = os.path.join(DEPOT_TOOLS, 'ninja')
 if sys.platform == 'win32':
   NINJA = '{0}.exe'.format(NINJA)
+elif sys.platform == 'freebsd11':
+  NINJA = 'ninja'
 
 DEBIAN_MIRROR = 'http://ftp.jp.debian.org/debian/pool/main/'
 BINTOOLS_NAME = 'c/cross-binutils/binutils-aarch64-linux-gnu_2.25-5_amd64.deb'
@@ -48,8 +50,8 @@
   if sys.platform == 'win32' and not args.skip_depot_tools_update:
     update_depot_tools()
 
-  if args.clean and os.path.isdir(SRC_DIR):
-    git_clean_recursive(SRC_DIR)
+  #if args.clean and os.path.isdir(SRC_DIR):
+  #  git_clean_recursive(SRC_DIR)
 
   # Warning about using a network share as git cache from Windows 7+: The
   # gclient script may experience errors unless you disable SMBv2 cache by
@@ -79,8 +81,8 @@
 
   return (apply_patches(args.skip_patches, target_arch) or
           copy_chromiumcontent_files() or
-          update_clang() or
-          setup_mips64el_toolchain(target_arch) or
+          #update_clang() or
+          #setup_mips64el_toolchain(target_arch) or
           run_gn(target_arch, args.defines))
 
 
@@ -280,7 +282,9 @@
     gn = os.path.join(SRC_DIR, 'buildtools', 'linux64', 'gn')
   elif sys.platform == 'darwin':
     gn = os.path.join(SRC_DIR, 'buildtools', 'mac', 'gn')
-
+  elif sys.platform == 'freebsd11':
+    gn = os.path.join(SRC_DIR, 'out', 'Release', 'gn')
+    
   env = os.environ.copy()
   if sys.platform in ['win32', 'cygwin']:
     env['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'
@@ -317,7 +317,17 @@
         args += ' use_pulseaudio=true'
         if IS_MIPS64EL_HOST:
           args += ' use_sysroot=false'
-
+    if sys.platform == 'freebsd11':
+	  args += ' use_gtk3=false clang_use_chrome_plugins=false  enable_media_router=true  enable_nacl=false'
+	  args += ' enable_one_click_signin=true  enable_remoting=false  enable_webrtc=false'
+	  args += ' fieldtrial_testing_like_official_build=true  is_clang=true  toolkit_views=true'
+	  args += ' treat_warnings_as_errors=false  use_allocator="none"  use_aura=true'
+	  args += ' use_cups=true  use_experimental_allocator_shim=false  use_lld=true'
+	  args += ' use_sysroot=false  use_system_libjpeg=true  use_system_sqlite=false'
+	  args += ' ffmpeg_branding="Chrome" proprietary_codecs=true enable_hevc_demuxing=true'
+	  args += ' use_gconf=true use_kerberos=true use_alsa=true use_pulseaudio=false' 
+	  args += ' use_sndio=false is_debug=false symbol_level=0 remove_webcore_debug_symbols=true extra_cxxflags="-D_LIBCPP_TRIVIAL_PAIR_COPY_CTOR=1 -I/usr/local/include"' 
+	  
     output_dir = get_output_dir(SOURCE_ROOT, target_arch, component)
     subprocess.call([gn, 'gen', os.path.relpath(output_dir, SRC_DIR), '--args=' + args],
                     cwd=SRC_DIR, env=env)
                     

 
 
 
